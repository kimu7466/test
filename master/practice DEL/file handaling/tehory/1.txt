File handling operations in most programming languages typically include opening a file, reading from a file, writing to a file, and closing the file. Here, I'll provide examples in Python, a widely used programming language that simplifies file handling operations.

### 1. Opening a File

To open a file in Python, you use the built-in `open()` function. The `open()` function has two primary arguments: the file name and the mode.

```python
# Opening a file for reading ('r')
file = open('example.txt', 'r')
```

### Modes of Opening a File

- `'r'`: Read mode which is used when the file is only being read.
- `'w'`: Write mode which is used to edit and write new information to the file (any existing files with the same name will be erased).
- `'a'`: Append mode, which is used to add new data to the end of the file; that is, new information is automatically amended to the end.
- `'r+'`: Special read and write mode, which is used to handle both actions when working with a file.

### 2. Reading from a File

You can read the contents of a file using methods like `.read()`, `.readline()`, or `.readlines()`.

```python
# Reading the entire file
file_content = file.read()
print(file_content)

# Reading line by line
file.seek(0)  # Reset file pointer to the beginning
for line in file:
    print(line, end='')

# Close the file after reading
file.close()
```

### 3. Writing to a File

To write data to a file, you must open it in write `'w'`, append `'a'`, or read+write `'r+'` mode.

```python
# Opening a file for writing
file = open('example_write.txt', 'w')
file.write('Hello, world!\n')
file.write('This is another line.\n')

# Closing the file is important to ensure data is saved
file.close()
```

### 4. Closing a File

Closing a file when youâ€™re done with it is crucial to free up resources and to ensure changes are written to disk.

```python
file.close()
```

### 5. Using `with` Statement for File Operations

The `with` statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called context managers. For file operations, it ensures that the file is properly closed after its suite finishes, even if an exception is raised on the way.

```python
with open('example.txt', 'r') as file:
    print(file.read())

# No need to explicitly close the file; it's automatically handled by the with statement.
```

Remember, handling files properly is crucial to prevent data loss and to ensure your programs run efficiently. Always close files when you're done with them, and be mindful of the mode you're opening them in to avoid unintentional data loss.